{"pages":[{"tags":"bg4","url":"./40323201-cdw15-bao-gao.html","text":"cdw15之齒輪2D與3D圖形繪圖: 1. 2D齒輪 下圖為更改的位置: 2. 3D齒輪(利用 Onshape 協助繪製) *心得: [2D] 這項作業是唯一一個我獨立完成的,並且在課堂上就繪製完成,這次使用的是 html 檔,在 SciTE 中更改程式,途中也是有很多次的失敗,但就是要不斷的嘗試再嘗試,就會成功了. [3D] 參考連結: [Kmolab] 1. http://chiamingyen.github.io/kmolab/blog/wang-ji-2d-zheng-chi-lun-chuan-dong-nie-he-hui-tu.html","title":"40323201 cdw15 報告"},{"tags":"bg4","url":"./40323201-cdw13-bao-gao.html","text":"cdw13之鍊條轉垂直圖形繪圖: *心得: 花了許多時間調整鍊條的位置,但是還是轉不到目標所要的點,一開始我使用較複雜的的程式(需要一個座標一個座標的調),當然,還是調不出來,最後只好參考三號同學得下去做了. 參考連結: [Kmolab] 1. http://chiamingyen.github.io/kmolab/blog/zi-xing-che-chuan-dong-2d-lian-tiao-hui-tu.html 2. http://chiamingyen.github.io/kmolab/blog/zi-xing-che-chuan-dong-2d-lian-tiao-hui-tu-er.html [Bg4] 1. http://cdw11-40323203.rhcloud.com/static/blog/40323203-cdw13-bao-gao.html","title":"40323201 cdw13 報告"},{"tags":"bg4","url":"./40323201-cdw11-bao-gao.html","text":"cdw11之3個圖形的零件組合繪圖: 1. AAAA 2. ABCD 3. BADC *心得: 原本的ABCD為垂直,而在調整位置時參考BADC之間的相對位置後,進而更改ABCD座標數值變成階梯式. 更改位置: 參考連結: [Kmolab] 1. http://chiamingyen.github.io/kmolab/blog/zi-xing-che-chuan-dong-2d-lian-tiao-hui-tu.html 2. http://chiamingyen.github.io/kmolab/blog/zi-xing-che-chuan-dong-2d-lian-tiao-hui-tu-er.html","title":"40323201 cdw11 報告"},{"tags":"bg4","url":"./40323205-qi-mo-bao-gao.html","text":"期末報告 自評分數：70分 1. 繪製2D齒輪零件： Openshift： http://bg4cdw11-40323205.rhcloud.com/bg4_40323205/gearwheel 先使用以下程式碼，繪製出2D齒輪零件，並存成html檔 window.onload=function(){ brython(1); } import spurmain from browser import document, html # 利用 Brython 的 document 建立一個 id 為 container 的 div 區域, 然後在其中放入對應的 html 標註 container = document['container'] # 3個齒輪的齒數 n1 = 17 n2 = 29 n3 = 15 # 根據繪圖的 3 個齒輪大小計算所需的畫布高度 height = 1.2*800*0.8/(int(n1)+int(n2)+int(n3))*max([int(n1), int(n2), int(n3)]) # 決定畫布的 id 字串 id = \"gear\" # 利用 Brython 的 html 方法建立 CANVAS canvas = html.CANVAS(id=id, width=800, height=height) # 將所建立的 canvas 畫布標註放入 container container <= canvas # m 為模數, 根據畫布的寬度, 計算適合的模數大小 # Module = mm of pitch diameter per tooth # 利用 80% 的畫布寬度進行繪圖 # 計算模數的對應尺寸 m = canvas.width*0.8/(n1+n2+n3) # 根據齒數與模組計算各齒輪的節圓半徑 pr1 = n1*m/2 pr2 = n2*m/2 pr3 = n3*m/2 # 畫布左右兩側都保留畫布寬度的 10% # 依此計算對應的最左邊齒輪的軸心座標 cx = canvas.width*0.1+pr1 cy = canvas.height/2 # pa 為壓力角 pa = 25 # 這裡的齒輪繪圖以所導入的 spurmain 模組中的 Spur 類別建立對應的 gear 變數, 且宣告畫布 id gear = spurmain.Spur(id) # 畫最左邊齒輪, 定位線旋轉角為 0, 軸心座標 (cx, cy) gear.spur(cx, cy, m, n1, pa, 0) # 第2個齒輪將原始的定位線逆時鐘轉 180 度後, 與第1個齒輪正好齒頂與齒頂對齊 # 只要第2個齒輪再逆時鐘或順時鐘轉動半齒的角度, 即可完成囓合 # 每一個齒分別包括從齒根到齒頂的範圍, 涵蓋角度為 360/n, 因此所謂的半齒角度為 180/n gear.spur(cx+pr1+pr2, cy, m, n2, pa, 180-180/n2) # 第2齒與第3齒的囓合, 首先假定第2齒的定位線在 theta 角為 0 的原始位置 # 如此, 第3齒只要逆時鐘旋轉 180 度後, 再逆時鐘或順時鐘轉動半齒的角度, 即可與第2齒囓合 # 但是第2齒為了與第一齒囓合時, 已經從原始定位線轉了 180-180/n2 度 # 而當第2齒從與第3齒囓合的定位線, 逆時鐘旋轉 180-180/n2 角度後, 原先囓合的第3齒必須要再配合旋轉 (180-180/n2 )*n2/n3 gear.spur(cx+pr1+pr2+pr2+pr3, cy, m, n3, pa, 180-180/n3+(180-180/n2)*n2/n3) 再使用以下程式碼，即可將html檔轉變為py檔，利於上傳至Openshift。 @bg4_40323205.route('/gearwheel', defaults={'n1':7,'n2':13,'n3':10,'n4':17}) @bg4_40323205.route('/gearwheel/ / / / ') def gearwheel(n1, n2, n3, n4): # 真正最後的架構應該要在函式中準備繪圖所需的資料, 然後用 template 呈現內容 title = \"網際 2D 繪圖\" head = ''' <!DOCTYPE html> '''+ title +''' ''' script = ''' window.onload=function(){ brython(1); } ''' headstring = head + script + \" \" # 能否根據 n1, n2, n3 與 width, 算出合理的 height # 模數計算 m = canvas.width 0.8/(n1+n2+n3) # max([int(n1), int(n2), int(n3)]) # 所以 height = 1.2 800 0.8/(int(n1)+int(n2)+int(n3)) max([int(n1), int(n2), int(n3)]) height = 1.2 800 0.8/(int(n1)+int(n2)+int(n3)+int(n4))*max([int(n1), int(n2), int(n3), int(n4)]) body = ''' # 將 導入的 document 設為 doc 主要原因在於與舊程式碼相容 from browser import document as doc # 由於 Python3 與 Javascript 程式碼已經不再混用, 因此來自 Javascript 的變數, 必須居中透過 window 物件轉換 from browser import window # 針對 Javascript 既有的物件, 則必須透過 JSConstructor 轉換 from javascript import JSConstructor import math # 主要用來取得畫布大小 canvas = doc[\"gear1\"] # 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx #ctx = canvas.getContext(\"2d\") # 針對類別的轉換, 將 Cango.js 中的 Cango 物件轉為 Python cango 物件 cango = JSConstructor(window.Cango) # 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換 shapedefs = window.shapeDefs # 目前 Cango 結合 Animation 在 Brython 尚無法運作, 此刻只能繪製靜態圖形 # in CangoAnimation.js #interpolate1 = window.interpolate # Cobi 與 createGearTooth 都是 Cango Javascript 程式庫中的物件 cobj = JSConstructor(window.Cobj) creategeartooth = JSConstructor(window.createGearTooth) # 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id=\"plotarea\" 的 canvas 上 cgo = cango(\"gear1\") ###################################### # 畫正齒輪輪廓 ##################################### def spur(cx, cy, m, n, pa, theta): # n 為齒數 #n = 17 # pa 為壓力角 #pa = 25 # m 為模數, 根據畫布的寬度, 計算適合的模數大小 # Module = mm of pitch diameter per tooth #m = 0.8*canvas.width/n # pr 為節圓半徑 pr = n*m/2 # gear Pitch radius # generate gear data = creategeartooth(m, n, pa) # Brython 程式中的 print 會將資料印在 Browser 的 console 區 #print(data) gearTooth = cobj(data, \"SHAPE\", { \"fillColor\":\"#ddd0dd\", \"border\": True, \"strokeColor\": \"#606060\" }) #gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh, 請注意 rotate 角度為 degree # theta 為角度 gearTooth.rotate(theta) # 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中 gear = gearTooth.dup() # gear 為單一齒的輪廓資料 #cgo.render(gearTooth) # 利用單齒輪廓旋轉, 產生整個正齒輪外形 for i in range(1, n): # 將 gearTooth 中的資料複製到 newTooth newTooth = gearTooth.dup() # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear newTooth.rotate(360*i/n) # appendPath 為 Cango 程式庫中的方法, 第二個變數為 True, 表示要刪除最前頭的 Move to SVG Path 標註符號 gear.appendPath(newTooth, True) # trim move command = True # 建立軸孔 # add axle hole, hr 為 hole radius hr = 0.6*pr # diameter of gear shaft shaft = cobj(shapedefs.circle(hr), \"PATH\") shaft.revWinding() gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path gear.translate(cx, cy) # render 繪出靜態正齒輪輪廓 cgo.render(gear) # 接著繪製齒輪的基準線 deg = math.pi/180 Line = cobj(['M', cx, cy, 'L', cx+pr*math.cos(theta*deg), cy+pr*math.sin(theta*deg)], \"PATH\", { 'strokeColor':'blue', 'lineWidth': 1}) cgo.render(Line) # 3個齒輪的齒數 n1 = '''+str(n1)+''' n2 = '''+str(n2)+''' n3 = '''+str(n3)+''' n4 = '''+str(n4)+''' # m 為模數, 根據畫布的寬度, 計算適合的模數大小 # Module = mm of pitch diameter per tooth # 利用 80% 的畫布寬度進行繪圖 # 計算模數的對應尺寸 m = canvas.width*0.8/(n1+n2+n3+n4) # 根據齒數與模組計算各齒輪的節圓半徑 pr1 = n1*m/2 pr2 = n2*m/2 pr3 = n3*m/2 pr4 = n4*m/2 # 畫布左右兩側都保留畫布寬度的 10% # 依此計算對應的最左邊齒輪的軸心座標 cx = canvas.width*0.1+pr1*0.2 cy = canvas.height/2 # pa 為壓力角 pa = 25 # 畫最左邊齒輪, 定位線旋轉角為 0, 軸心座標 (cx, cy) spur(cx, cy, m, n1, pa, 0) # 第2個齒輪將原始的定位線逆時鐘轉 180 度後, 與第1個齒輪正好齒頂與齒頂對齊 # 只要第2個齒輪再逆時鐘或順時鐘轉動半齒的角度, 即可完成囓合 # 每一個齒分別包括從齒根到齒頂的範圍, 涵蓋角度為 360/n, 因此所謂的半齒角度為 180/n spur(cx+pr1+pr2, cy, m, n2, pa, 180-180/n2) # 第2齒與第3齒的囓合, 首先假定第2齒的定位線在 theta 角為 0 的原始位置 # 如此, 第3齒只要逆時鐘旋轉 180 度後, 再逆時鐘或順時鐘轉動半齒的角度, 即可與第2齒囓合 # 但是第2齒為了與第一齒囓合時, 已經從原始定位線轉了 180-180/n2 度 # 而當第2齒從與第3齒囓合的定位線, 逆時鐘旋轉 180-180/n2 角度後, 原先囓合的第3齒必須要再配合旋轉 (180-180/n2 )*n2/n3 spur(cx+pr1+pr2+pr2+pr3, cy, m, n3, pa, 180-180/n3+(180-180/n2)*n2/n3) spur(cx+pr1+pr2+pr2+pr3+pr3+pr4, cy, m, n4, pa, 180-180/n4+(180-180/n3)*n3/n4) ''' bodystring = \" \" + body+\" \" endstring = \" \" outstring = headstring + bodystring + endstring return outstring # 若 template 檔案名稱與位於外部 templates 目錄中的檔案同名, 則取外部的 template # return render_template('g1index.html', user=user) 2. 繪製3D齒輪零件： 使用OnShape繪製零件，並組裝完成。 心得： 在使用第一個程式碼繪製齒輪零件時相當的順利，但要轉換到第二個程式碼後， 需要在近端檢查是否正確時，卻吃了閉門羹，詢問了同學好久，才發現是因為我們組內的檔案有亂碼， 導致我近端一直無法出現繪製的東西，刪除了亂碼後，就成功了。 繪製Onshape有發生滿多問題的，但最大的問題就是速度太慢，因為是線上的軟體，同時使用的人太多， 除了這個問題，其他的問題都還滿容易解決的。 本次作業讓我了解到Onshape還有很多功能未被我們開發，又多學到了一個東西！","title":"40323205 期末報告"},{"tags":"bg4","url":"./40323208-cdw13-bao-gao.html","text":"啟動 cdw13 協同專案 eighteenthirty (棕色) openshift網址: http://bg4cdw11-40323208.rhcloud.com/bg4_40323208/eighteenthirty 還沒轉成90度 轉成90度後 心得: 這次是要做鍊條，弄了很久還是不太清楚方向怎麼用，所以只改了顏色。原本不太會用openshift跟網址的連結瀏覽圖片，後來問了同學才更清楚知道該怎麼用，也把11周的openshift網址補好了，讓整份報告更完整。 新增:將水平的鏈條轉成90度，也更了解程式內容的意義。 pelican 網誌位置: http://cdw11-ag100.rhcloud.com/static/ 分組程式: http://cdw11-ag100.rhcloud.com/option fileuploadform: http://cdw11-ag100.rhcloud.com/fileuploadform imageuploadform: http://cdw11-ag100.rhcloud.com/imageuploadform","title":"40323208 cdw13 報告"},{"tags":"bg4","url":"./40323208-cdw15-bao-gao.html","text":"啟動 cdw15 協同專案 2D齒輪 改變齒輪齒數做測試 利用下面程式修改並存成html檔 (已修改齒輪齒數做範例) 3D Onshape onshape 網址 Onshape 3D 網址 心得: 看了很久，還是不知道怎麼下手，所以詢問了同學，後來決定用同學教我的步驟及方式，先自己動手做出我會的部分，也許過程有錯，但是一步一步地想，慢慢地做出，也多了收穫。 pelican 網誌位置: http://cdw11-ag100.rhcloud.com/static/ 分組程式: http://cdw11-ag100.rhcloud.com/option fileuploadform: http://cdw11-ag100.rhcloud.com/fileuploadform imageuploadform: http://cdw11-ag100.rhcloud.com/imageuploadform","title":"40323208 cdw15 報告"},{"tags":"bg4","url":"./40323202-cdw13-bao-gao.html","text":"啟動 cdw13 協同專案 pelican 網誌位置: http://cdw11-ag100.rhcloud.com/static/ 分組程式: http://cdw11-ag100.rhcloud.com/option fileuploadform: http://cdw11-ag100.rhcloud.com/fileuploadform imageuploadform: http://cdw11-ag100.rhcloud.com/imageuploadform 請各組在 CDW12 下課前完成下列3個圖形的零件組合繪圖: circle2 openshift網站:http://localhost:5000/bg4_40323202/circle2 chain openshift網站:http://localhost:5000/bg4_40323202/chain 心得: 這週把openshift網站做出來，一開始遇到了瓶頸不知道該如何解決。幸好有組員們耐心的教導我，讓我知道哪裡做錯也知道為什麼會有那些錯誤。 要感謝耐心教導我的人，讓我知道我為什麼會做錯並修正錯誤的地方。 非常高興自己每一週都有所進步並收穫了許多，並有動力繼續努力完成接下來的報告。","title":"40323202 cdw13 報告"},{"tags":"bg4","url":"./40323203-cdw11-bao-gao.html","text":"40323203 cdw11 報告 pelican 網誌位置: http://cdw11-ag100.rhcloud.com/static/ 分組程式: http://cdw11-ag100.rhcloud.com/option fileuploadform: http://cdw11-ag100.rhcloud.com/fileuploadform imageuploadform: http://cdw11-ag100.rhcloud.com/imageuploadform 請各組在 CDW11 下課前完成下列3個圖形的零件組合繪圖:","title":"40323203 cdw11 報告"},{"tags":"bg4","url":"./40323205-cdw11-bao-gao.html","text":"1.AAAA Openshift： http://bg4cdw11-40323205.rhcloud.com/bg4_40323205/AAAAAAAA 2.BADC Openshift： http://bg4cdw11-40323205.rhcloud.com/bg4_40323205/BADCBADC 3.ABCD Openshift： http://bg4cdw11-40323205.rhcloud.com/bg4_40323205/ABCDABCD 圖片更改顏色前。網址裡的是更改顏色後。 ----------------------------------------------------------------------------- 心得： 這次的作業我認為更有小組一起運作的感覺。 把整組的資料放在其中一個組員的github裡，比起兩個班一起使用一個github，這種方法令人更安心。 也很感謝各個組員的教導！","title":"40323205 cdw11 報告"},{"tags":"bg4","url":"./40323205-cdw13-bao-gao.html","text":"Openshift： http://bg4cdw11-40323205.rhcloud.com/bg4_40323205/eighteenthirty 心得： 本次作業是將鍊條翻轉成90度。 試驗了好幾次，只能將一開始的鏈條翻轉成60度後，就無法作業了， 後來詢問了同學，同學也很好心的告訴了我他的方法後， 照著同學做的方式，自己也更改了一些程式後，就完成了此次作業。 但鍊條是用微調的方法，不是使用算式，所以看起來有些許不同、奇怪。","title":"40323205 cdw13 報告"},{"tags":"bg4","url":"./40323208-cdw11-bao-gao.html","text":"啟動 cdw11 協同專案 請各組在 CDW11 下課前完成下列3個圖形的零件組合繪圖: 1.aaaa (棕色) openshift網址: http://bg4cdw11-40323208.rhcloud.com/bg4_40323208/taskaaaa 2.badc (棕色) openshift網址: http://bg4cdw11-40323208.rhcloud.com/bg4_40323208/taskbadc 3.abcd (棕色) openshift網址: http://bg4cdw11-40323208.rhcloud.com/bg4_40323208/taskabcd 心得: 一開始不太了解要做什麼，後來看了組員怎麼做後，自己試試看，中間有發生很多困難，或是擔心把倉儲推爆會害了大家，雖然作業是過了兩個禮拜才真正完成並實際呈現，很開心也覺得有收穫，也有動力往下個報告邁進。 pelican 網誌位置: http://cdw11-ag100.rhcloud.com/static/ 分組程式: http://cdw11-ag100.rhcloud.com/option fileuploadform: http://cdw11-ag100.rhcloud.com/fileuploadform imageuploadform: http://cdw11-ag100.rhcloud.com/imageuploadform","title":"40323208 cdw11 報告"},{"tags":"bg4","url":"./40323202-cdw11-bao-gao.html","text":"啟動 cdw11 協同專案 pelican 網誌位置: http://cdw11-ag100.rhcloud.com/static/ 分組程式: http://cdw11-ag100.rhcloud.com/option fileuploadform: http://cdw11-ag100.rhcloud.com/fileuploadform imageuploadform: http://cdw11-ag100.rhcloud.com/imageuploadform 請各組在 CDW11 下課前完成下列3個圖形的零件組合繪圖: AAAA (yellow) openshift網站:http://cdw11-40323202.rhcloud.com/bg4_40323202/task4a BADC (yellow) openshift網站:http://cdw11-40323202.rhcloud.com/bg4_40323202/taskbadc ABCD (yellow) openshift網站:http://cdw11-40323202.rhcloud.com/bg4_40323202/taskabcd 心得: 一開始並不是很了解要如何操作，幸好有組員的教導和幫助，讓我知道要如何操作。雖然一開始自己操作的時候有不小心做錯，但是謝謝組員和老師的教導，讓我知道我做錯的地方並修正它。很高興自己有所進步並收穫了許多，會繼續努力完成接下來的報告。","title":"40323202 cdw11 報告"}]}